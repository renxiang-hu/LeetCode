方法一：映射

* java

```java
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(target - nums[i])) return new int[]{map.get(target - nums[i]), i};
            else map.put(nums[i], i);
        }
        return null;
    }
}
```

- 时间复杂度：O(n)
- 空间间复杂度：O(n)

![image.png](https://pic.leetcode-cn.com/1660173157-swBtXT-image.png)

方法二：预排序、双指针

* java

```java
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i][0] = nums[i];
            arr[i][1] = i;
        }
        Arrays.sort(arr, (a, b) -> a[0] - b[0]);
        int l = 0, r = n - 1;
        while (arr[l][0] + arr[r][0] != target) {
            if (arr[l][0] + arr[r][0] < target) l++;
            else r--;
        }
        return new int[] {arr[l][1], arr[r][1]};
    }
}
```

- 时间复杂度：O(nlogn)
- 空间间复杂度：O(1)

![image.png](https://pic.leetcode-cn.com/1660173930-mFYzKu-image.png)

方法三：蛮力

* java

```java
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) return new int[]{i, j};
            }
        }
        return null;
    }
}
```

- 时间复杂度：O(n^2)
- 空间间复杂度：O(1)

![image.png](https://pic.leetcode-cn.com/1660173860-cEmGeL-image.png)

